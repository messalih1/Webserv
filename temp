    char data[len];
    bzero(data, len);
    bytes_received = recv(client_socket, &data, len, 0);
    
    if (bytes_received == -1) 
        return -1;
    else if (bytes_received == 0) 
    {
        cout << "Client disconnected\n";
        EV_SET(&kev, client_socket, EVFILT_READ, EV_DELETE, 0, 0, NULL);
        kevent(kq, &kev, 1, NULL, 0, NULL); 
        close(client_socket);
        return 1;
    }
     

    int j = 0; 
    while (j < bytes_received)
    {
        buffer.push_back(data[j]);
        j++;
    }
      
    // total_bytes_received += len;
    
    // pos = 0;
    // while (buffer[pos])
    // {
    //     if(buffer[pos] == '\r' && buffer[pos + 1] == '\n')
    //     {
    //         pos += 2;
    //         if(buffer[pos] == '\r' && buffer[pos + 1] == '\n' )
    //         {
    //             headerOfRequest = buffer.substr(0,pos);
    //             pos = headerOfRequest.find("Content-Length");
    //             if(pos != -1)
    //             {
    //                 ContentLength = atoi(headerOfRequest.substr(pos + 16,headerOfRequest.size()).c_str());
    //                 // return 1;
    //             }
    //             // return 2;
    //         }
    //         --pos;
    //     }
    //     pos++;
    // }



 // while (total_bytes_received < len) 
    // {
    //     char data[BUFFER_SIZE];
    //     bzero(data, BUFFER_SIZE);
    //     bytes_received = recv(client_socket, &data, BUFFER_SIZE, 0);
        
    //     if (bytes_received == -1) 
    //         return -1;
         
    //     total_bytes_received += bytes_received; // 5
        int j = 0; 
        while (j < bytes_received)
        {
            buffer.push_back(data[j]);
            j++;
        }
        int pos = 0;
        while (buffer[pos] && flag == 0)
        {
            if(buffer[pos] == '\r' && buffer[pos + 1] == '\n')
            {
                pos += 2;
                if(buffer[pos] == '\r' && buffer[pos + 1] == '\n' )
                {
                    headerOfRequest = buffer.substr(0,pos);
                    pos = headerOfRequest.find("Content-Length");
                    if(pos != -1)
                    {
                        ContentLength = atoi(headerOfRequest.substr(pos + 16,headerOfRequest.size()).c_str());
                        flag = 1;
                        i = headerOfRequest.size();
                        break;
                    }
                    // return 2;
                }
                --pos;
            }
            pos++;
        }
    }


44793994

44794246



GET / HTTP/1.1
User-Agent: PostmanRuntime/7.31.0
Accept: */*
Postman-Token: 491ceba3-cc23-4207-8322-ae3bba33eba9
Host: 127.0.0.1:8081
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 2568499
Content-Type: image/jpeg

GET / HTTP/1.1
User-Agent: PostmanRuntime/7.31.0
Accept: */*
Postman-Token: 1db30af8-510a-4aad-8498-8813c7252433
Host: 127.0.0.1:8081
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 13914472
Content-Type: application/pdf

GET / HTTP/1.1
User-Agent: PostmanRuntime/7.31.0
Accept: */*
Postman-Token: fd6f5023-9423-444b-a19f-b4b367336980
Host: 127.0.0.1:8081
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Length: 44793994
Content-Type: video/mp4